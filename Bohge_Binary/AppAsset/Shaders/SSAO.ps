//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////



precision mediump float;
#define saturate(x) clamp( x, 0.0, 1.0 )
#define lerp        mix

varying vec2 var_coord;

uniform sampler2D g_NormalTexture;
uniform sampler2D g_DepthTexture;
uniform sampler2D g_JitterTexture;
uniform mat4 g_ProjInv;
uniform vec2 g_StepSize;
uniform float g_AOEdgeFinder;
uniform float g_AOIntensity;
uniform float g_JitterAmount;


//------------------------------------------------------------------------------
// Returns the position of the pixel (in view space)
//
vec3 GetPixelPosition( vec2 TexCoord )
{
    // Reconstruct view position of this pixel
    float Depth = texture2D( g_DepthTexture, TexCoord ).r;
	//Depth = Depth * 2.0 - 1.0;

    //vec4 ScreenPos = vec4( TexCoord.x * 2.0 - 1.0, TexCoord.y * 2.0 - 1.0, Depth.r, 1.0 );
    vec4 ScreenPos = vec4( TexCoord * vec2( 2.0 ) - vec2( 1.0 ), Depth, 1.0 );

    vec4 ViewPos = g_ProjInv * ScreenPos;
	ViewPos.w = 1.0 / ViewPos.w;
    ViewPos.xyz *= ViewPos.w;

    return ViewPos.xyz;
}


//------------------------------------------------------------------------------
// Returns the normal of the pixel (in view space)
//
vec3 GetPixelNormal( vec2 TexCoord )
{
    vec3 Normal = texture2D( g_NormalTexture, var_coord ).xyz * 2.0 - 1.0;
    return Normal.xyz;
}


//------------------------------------------------------------------------------
// Calculates ambient occlusion term given for the pixel provided.  Relative
// to the other two input parameters, which come from the target pixel in the PS.
//
float AmbientOcclusionAt( vec2 NeighborUV, vec3 TargetPosition, vec3 TargetNormal )
{
    vec3  Delta = GetPixelPosition( NeighborUV ) - TargetPosition;
    vec3  N = GetPixelNormal( NeighborUV );
    vec3  V = normalize( Delta );
    float D = length( Delta ) * 0.1;
    float Epsilon = 0.5;

    float a0 = 1.0 - saturate( dot( N, -V ) - Epsilon );
    float a1 = saturate( dot( TargetNormal, V ) - Epsilon );
    float a2 = 1.0 - 1.0 / sqrt( 1.0 / ( D * D * g_AOEdgeFinder ) + 1.0 );

    return a0 * a1 * a2;
}


void main()
{
    #define NUM_ITERATIONS 4

    float SampleAngle = 0.0;

    // Accumulate AO in this
    float AO = 0.0;

    // For noise
    vec4 Noise = texture2D( g_JitterTexture, var_coord.xy * vec2( 4.0 ) );

    // Grab these values for the target pixel, to compare against neighbors
    vec3 TargetNormal = GetPixelNormal( var_coord.xy );
    vec3 TargetPosition = GetPixelPosition( var_coord.xy );

    // Used to reduce jitter on distant surfaces
    float InvDepth = ( 1.0 / TargetPosition.z );

    // Iterations will spread out at this rate
    vec2 OutwardCrawl = g_StepSize; // * vec2( 0.1 );

    vec2 SampleDist = OutwardCrawl;

    for( int i = 0; i < NUM_ITERATIONS; i++ )
    {
        // Pick a new probe direction
        float dx = cos( SampleAngle );
        float dy = sin( SampleAngle );

        // Calculate jitter
        vec2 Jitter = ( SampleDist + Noise.xy * vec2( g_JitterAmount ) * vec2( 1.0 + InvDepth ) );

        // Choose a new sample point
        vec2 UVoffset = vec2( dx - dy, dy + dx );
        UVoffset *= Jitter;

        // Calculate ambient occlusion term for this new probe
        AO += AmbientOcclusionAt( var_coord.xy + UVoffset, TargetPosition, TargetNormal );

        SampleDist += OutwardCrawl;

        SampleAngle += ( 6.283185307179586476925286766559 / float( NUM_ITERATIONS ) );
    }
    AO *= ( 1.0 / float( NUM_ITERATIONS ) );
    gl_FragColor = vec4( 
		saturate( 
			1.0 - AO * g_AOIntensity 
			* texture2D( g_NormalTexture, var_coord ).a //提出掉alpha是0的，比如天空盒和草树叶的空挡
			) );
}