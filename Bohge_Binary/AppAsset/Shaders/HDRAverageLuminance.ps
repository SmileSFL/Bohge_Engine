//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////



precision mediump float;

uniform sampler2D g_ColorTexture;
uniform vec2 g_StepSize;
varying vec2 var_coord;

float paraA[16];
float paraB[16];

void main()
{
	paraA[0] = paraA[4] = paraA[8] = paraA[12] = 1.5 * g_StepSize.x;
	paraA[1] = paraA[5] = paraA[9] = paraA[13] = 0.5 * g_StepSize.x;
	paraA[2] = paraA[6] = paraA[10] = paraA[14] = -0.5 * g_StepSize.x;
	paraA[3] = paraA[7] = paraA[11] = paraA[15] = -1.5 * g_StepSize.x;

	paraB[0] = paraB[1] = paraB[2] = paraB[3] = 1.5 * g_StepSize.y;
	paraB[4] = paraB[5] = paraB[6] = paraB[7] = 0.5 * g_StepSize.y;
	paraB[8] = paraB[9] = paraB[10] = paraB[11] = -0.5 * g_StepSize.y;
	paraB[12] = paraB[13] = paraB[14] = paraB[15] = -1.5 * g_StepSize.y;
		
    highp float fSum = 0.0;
	for( int i = 0; i < 16; i ++ )
	{
		fSum += texture2D( g_ColorTexture, var_coord + vec2( paraA[i], paraB[i])).r;
	}
	
	// Average
	fSum *= (1.0 / (16.0));
	
 	gl_FragColor = vec4(fSum, fSum, fSum, fSum);
}