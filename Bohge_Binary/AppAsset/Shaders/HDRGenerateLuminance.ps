//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////



precision mediump float;


uniform sampler2D g_ColorTexture;
uniform vec2 g_StepSize;

varying vec2 var_coord[4];

void main()
{
    //used to prevent black pixels
    const float Delta = 0.0001;  
    
	//luminance values            
	//somehow we have to raise the value range here for the log function ....
	const vec3 LUMINANCE = vec3(0.2125, 0.7154, 0.0721) *  5.5;      
    
    float fLogLumSum = 0.0;
    vec2 StepSize = g_StepSize;

	for( int i = 0 ; i < 4 ; i ++ )
	{
		fLogLumSum += log(dot(texture2D( g_ColorTexture, var_coord[i] ).rgb, LUMINANCE) + Delta);
	}    
	fLogLumSum *= (1.0 / (4.0));
	
 	gl_FragColor = vec4(fLogLumSum, fLogLumSum, fLogLumSum, fLogLumSum);
}
