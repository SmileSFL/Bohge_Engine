//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////



#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform sampler2D g_ColorTexture;
uniform sampler2D g_DepthTexture;
uniform float g_GaussWeight[4];
uniform vec2 g_StepSize;
uniform vec2 g_NeraQ_Q;
uniform vec2 g_FocalDistRange;

varying vec2 var_coord;

void main()
{
	float z_b = texture2D( g_DepthTexture, var_coord ).r;
    float z_n = 2.0 * z_b - 1.0;
	float WorldDepth = g_NeraQ_Q.x / ( g_NeraQ_Q.y - z_n );	
    float Lerpval = min( 1.0, abs( g_FocalDistRange.x - WorldDepth ) * g_FocalDistRange.y );
    
    // 4 tap gaussian distribution
    vec2 localstep = g_StepSize * Lerpval;
    vec4 Color = g_GaussWeight[0] * texture2D( g_ColorTexture, vec2( var_coord.x + localstep.x, var_coord.y + localstep.y ) );
    Color += g_GaussWeight[1] * texture2D( g_ColorTexture, vec2( var_coord.x + localstep.x * 0.5, var_coord.y + localstep.y * 0.5 ) );
    Color += g_GaussWeight[2] * texture2D( g_ColorTexture, vec2( var_coord.x - localstep.x * 0.5, var_coord.y - localstep.y * 0.5 ) );
    Color += g_GaussWeight[3] * texture2D( g_ColorTexture, vec2( var_coord.x - localstep.x, var_coord.y - localstep.y ) );

    gl_FragColor = Color;
}