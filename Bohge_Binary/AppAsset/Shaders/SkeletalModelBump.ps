//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////



precision mediump float;


// Define some useful macros
#define saturate(x) clamp( x, 0.0, 1.0 )
#define lerp        mix

uniform vec3 vAmbient_Light; //环境光强度乘环境光颜色
uniform vec3 Specular_Light; //高光强度乘灯光颜色
uniform vec3 Light;
uniform float Shininess;

uniform sampler2D BaseTexture;
uniform sampler2D BumpTexture;

varying vec2 g_vTexCoord;
varying vec3 g_vLightVec;
varying vec3 g_vViewVec;

varying vec4 g_vColor;

void main()
{
    vec4 vBaseColor 	= texture2D( BaseTexture, g_vTexCoord );

    // Select the normal in the appropriate space
    vec3 vNormal    	= texture2D( BumpTexture, g_vTexCoord, -1.0 ).xyz * 2.0 - 1.0;

    // Standard Phong lighting
    float fAtten    	= saturate( 1.0 - 0.05 * dot( g_vLightVec, g_vLightVec ) );
    vec3  vLight    	= normalize( g_vLightVec );
    vec3  vView     	= normalize( g_vViewVec );
    vec3  vHalf     	= normalize( vLight + vView );
    float dotLightNormal= dot( vLight, vNormal );
	float fDiffuse = saturate( dotLightNormal );
	
	float fSpecular = pow( saturate( dot( vHalf, vNormal ) ) , Shininess );		
	gl_FragColor = vec4( ( vAmbient_Light + fDiffuse * Light ) * vBaseColor.rgb + fSpecular * Specular_Light, vBaseColor.a );
	//gl_FragColor = vec4( g_vColor.xyz, 1.0);
}
