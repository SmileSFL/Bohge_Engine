//////////////////////////////////////////////////////////////////////////////////////
//
//						The Bohge Engine License (BEL)
//
//	Copyright (c) 2011-2014 Peng Zhao
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in 
//	all copies or substantial portions of the Software. And the logo of 
//	Bohge Engine shall be displayed full screen for more than 3 seconds 
//	when the software is started. Copyright holders are allowed to develop 
//	game edit based on Bohge Engine, The edit must be released under the MIT 
//	open source license if it is going to be published. In no event shall 
//	copyright holders be prohibited from using any code of Bohge Engine 
//	to develop any other analogous game engines.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//
//////////////////////////////////////////////////////////////////////////////////////
#include "Shaders/Transform.shader"
#include "Shaders/Coordinate.shader"
#include "Shaders/Sampling.shader"
#include "Shaders/Outputs.shader"
#include "Shaders/DirectionLight.shader"
#include "Shaders/AmbientLight.shader"
#include "Shaders/PointLight.shader"
#include "Shaders/SpotLight.shader"
#include "Shaders/SurfaceLighting.shader"
#include "Shaders/LinerDepth.shader"
#include "Shaders/PackageDepth.shader"
#include "Shaders/PackageNormal.shader"


#LIGHTING_AMBIENT_FORWARD_SINGLE 		LocalableAmbientLight
#LIGHTING_DIRECTION_FORWARD_SINGLE 		LocalableDirectionLight
#LIGHTING_POINT_FORWARD_SINGLE 			LocalablePointLight
#LIGHTING_SPOT_FORWARD_SINGLE 			LocalableSpotLight

//#LIGHTING_AMBIENT_FORWARD_MULTI			EmptyMaterial
//#LIGHTING_DIRECTION_FORWARD_MULTI 		EmptyMaterial
//#LIGHTING_POINT_FORWARD_MULTI 			EmptyMaterial
//#LIGHTING_SPOT_FORWARD_MULTI			EmptyMaterial

//#LIGHTING_AMBIENT_DEFFERRED 			EmptyMaterial
//#LIGHTING_DIRECTION_DEFFERRED 			EmptyMaterial
//#LIGHTING_POINT_DEFFERRED 				EmptyMaterial
//#LIGHTING_SPOT_DEFFERRED 				EmptyMaterial

#UNIVERSAL_DEPTH 						LocalableDepth
#UNIVERSAL_NORMAL 						LocalableNormal
//#UNIVERSAL_DECAL 						EmptyMaterial
//#UNIVERSAL_MRT	 						EmptyMaterial
//#UNIVERSAL_POSTEFFECT					EmptyMaterial


#MATERIAL_DEFINE LocalableAmbientLight
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { CULL_FACE_BACK, DEPTH_MASK_ON, DEPTH_TEST_ON, DEPTH_FUNCTION_LESS  }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"BaseTransfrom",
		"Base2DCoordinate",
		"VertexOutput",
	}
	FRAGMENT_SHADER = 
	{
		"Texture2DSampling",
		"AmbientLightSurface",
		"DiffSurfaceLighting",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束

#MATERIAL_DEFINE LocalablePointLight
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { DEPTH_TEST_ON, DEPTH_MASK_ON, DEPTH_FUNCTION_LESS, CULL_FACE_NONE }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"TransfromWorldPosition",
		"Base2DCoordinate",
		"PointLightVertex",
		"VertexOutput",
	}
	FRAGMENT_SHADER = 
	{
		"Texture2DSampling",
		"PointLightSurface",
		"DiffSpecSurfaceLighting",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束

#MATERIAL_DEFINE LocalableSpotLight
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { DEPTH_TEST_ON, DEPTH_MASK_ON, DEPTH_FUNCTION_LESS, CULL_FACE_NONE }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"TransfromWorldPosition",
		"SpotLightVertex",
		"Base2DCoordinate",
		"VertexOutput",
	}
	FRAGMENT_SHADER = 
	{
		"Texture2DSampling",
		"SpotLightSurface",
		"DiffSpecSurfaceLighting",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束

#MATERIAL_DEFINE LocalableDirectionLight
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { DEPTH_TEST_ON, DEPTH_MASK_ON, DEPTH_FUNCTION_LESS, CULL_FACE_NONE }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"TransfromWorldPosition",
		"Base2DCoordinate",
		"DirectionLightVertex",
		"VertexOutput",
	}
	FRAGMENT_SHADER = 
	{
		"Texture2DSampling",
		"DirectionLightSurface",
		"DiffSpecSurfaceLighting",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束

#MATERIAL_DEFINE LocalableDepth
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { DEPTH_TEST_ON, DEPTH_MASK_ON, DEPTH_FUNCTION_LESS, CULL_FACE_BACK }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"TransfromWorldPosition",
		"VertexOutput",
		"LinerDepth",
	}
	FRAGMENT_SHADER = 
	{
		"PackageFloatToVec",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束


#MATERIAL_DEFINE LocalableNormal
	RENDER_QUEUE = OPAQUE
	COLOR_MASK = COLOR_RGB
	ALPAH_MODE = { ALPAH_OFF }
	DRAW_MODE = { DEPTH_TEST_OFF, DEPTH_MASK_OFF, DEPTH_FUNCTION_LESS, CULL_FACE_BACK }
	STENCIL_MODE = {STENCIL_OFF}

	VERTEX_SHADER = 
	{
		"TransfromWorldPosition",
		"VertexOutput",
	}
	FRAGMENT_SHADER = 
	{
		"PackageNormal",
		"FragmentOutput",
	}
#END_DEFINE //材质定义结束